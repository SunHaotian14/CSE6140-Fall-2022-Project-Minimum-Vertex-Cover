"""
This file contains some support functions for evaluation, i.e.,
- formulating a comprehensive table to present the results from different algorithms;
- plotting the Qualified Runtime for various solution qualities (QRTDs);
- plotting the Solution Quality Distributions for various run-times (SQDs);
- box plotting for running time comparison.
"""

from pandas import DataFrame as df
from matplotlib import pyplot as plt
from io_utils import load_graph, load_solution, load_trace, get_graph_files, get_solution_files

def verify_solutions():
    """
    Verify the solutions generated by the algorithms

    """
    qualified = True
    solution_files = get_solution_files()
    for solution_file in solution_files:
        if 'delaunay_n10' in solution_file:
            graph_name0, graph_name1, algorithm, cutoff_time, seed = solution_file.split('_')
            graph_name = graph_name0 + '_' + graph_name1
        else:
            graph_name, algorithm, cutoff_time, seed = solution_file.split('_')
        graph = load_graph(graph_name)
        num_sol, solution = load_solution(solution_file)
        print('=========================================')
        print('Graph: {}, Algorithm: {}, Seed: {}, Cutoff: {}' 
            .format(graph_name, algorithm, seed, cutoff_time))
        if len(solution) != num_sol:
            print('The number of vertices ({}) in the solution does not match the number of solution ({})!'
                .format(num_sol, len(solution)))
            qualified = False
            continue
        if not set(solution).issubset(set(graph.get_vertices_set())): 
            print('The solution contains vertices that are not in the graph!')
            qualified = False
            continue
        for edge in graph.get_edges_set():
            if (edge[0] not in solution) and (edge[1] not in solution):
                print('Edge {} is not covered by the solution!'.format(edge))
                qualified = False
                break
        if qualified:
            print('The solution is qualified!')
    if qualified:
        print('All the solutions are qualified!')

def results_table():
    """
    Formulate a comprehensive table to present the results from different algorithms

    Returns
    -------
    table : pandas.DataFrame
        The comprehensive table of the results

    """
    # TODO the table should contain the following columns:

def QRTD_plot():
    """
    Plot the Qualified Runtime for various solution qualities (QRTDs)

    """
    # TODO

def SQD_plot():
    """
    Plot the Solution Quality Distributions for various run-times (SQDs)

    """
    # TODO

def box_plot():
    """
    Box plotting for running time comparison

    """
    # TODO

# for debugging purpose
if __name__ == '__main__':
    verify_solutions()
